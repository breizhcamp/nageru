From: Yoann Dubreuil <yoann.dubreuil@gmail.com>
Date: Sun, 18 Mar 2018 17:14:14 +0100
Subject: Option to choose SDI over HDMI by default

---
 decklink_util.cpp | 22 +++++++++++++++-------
 flags.cpp         |  6 ++++++
 flags.h           |  1 +
 3 files changed, 22 insertions(+), 7 deletions(-)

diff --git a/decklink_util.cpp b/decklink_util.cpp
index d808196..e9f6c82 100644
--- a/decklink_util.cpp
+++ b/decklink_util.cpp
@@ -4,6 +4,7 @@
 #include <assert.h>
 
 #include "decklink_util.h"
+#include "flags.h"
 
 using namespace bmusb;
 using namespace std;
@@ -77,12 +78,19 @@ BMDVideoConnection pick_default_video_connection(IDeckLink *card, BMDDeckLinkAtt
 		exit(1);
 	}
 
-	if (connection_mask & bmdVideoConnectionHDMI) {
-		return bmdVideoConnectionHDMI;
-	} else if (connection_mask & bmdVideoConnectionSDI) {
-		return bmdVideoConnectionSDI;
+	if (!global_flags.prefer_sdi) {
+		if (connection_mask & bmdVideoConnectionHDMI) {
+			return bmdVideoConnectionHDMI;
+		} else if (connection_mask & bmdVideoConnectionSDI) {
+			return bmdVideoConnectionSDI;
+		}
 	} else {
-		// Fallback: Return lowest-set bit, whatever that might be.
-		return connection_mask & (-connection_mask);
+		if (connection_mask & bmdVideoConnectionSDI) {
+			return bmdVideoConnectionSDI;
+		} else if (connection_mask & bmdVideoConnectionHDMI) {
+			return bmdVideoConnectionHDMI;
+		}
 	}
-}
+	// Fallback: Return lowest-set bit, whatever that might be.
+	return connection_mask & (-connection_mask);
+}
\ No newline at end of file
diff --git a/flags.cpp b/flags.cpp
index 71fad8b..575ff20 100644
--- a/flags.cpp
+++ b/flags.cpp
@@ -63,6 +63,7 @@ enum LongOption {
 	OPTION_INPUT_YCBCR_INTERPRETATION,
         OPTION_ALSA_DELAY,
 	OPTION_FULL_SCREEN,
+	OPTION_PREFER_SDI,
 };
 
 void usage(Program program)
@@ -161,6 +162,7 @@ void usage(Program program)
 		fprintf(stderr, "                                    auto is rec601 for SD, rec709 for HD, always limited\n");
 		fprintf(stderr, "                                    limited means standard 0-240/0-235 input range (for 8-bit)\n");
 		fprintf(stderr, "      --full-screen               Start in full screen\n");
+		fprintf(stderr, "      --prefer-sdi                Open capture on SDI port instead of HDMI port\n");
 	}
 }
 
@@ -228,6 +230,7 @@ void parse_flags(Program program, int argc, char * const argv[])
 		{ "10-bit-output", no_argument, 0, OPTION_10_BIT_OUTPUT },
 		{ "input-ycbcr-interpretation", required_argument, 0, OPTION_INPUT_YCBCR_INTERPRETATION },
 		{ "full-screen", no_argument, 0, OPTION_FULL_SCREEN },
+		{ "prefer-sdi", no_argument, 0, OPTION_PREFER_SDI },
 		{ 0, 0, 0, 0 }
 	};
 	vector<string> theme_dirs;
@@ -503,6 +506,9 @@ void parse_flags(Program program, int argc, char * const argv[])
 		case OPTION_FULL_SCREEN:
 			global_flags.full_screen = true;
 			break;
+		case OPTION_PREFER_SDI:
+			global_flags.prefer_sdi = true;
+			break;
 		case OPTION_HELP:
 			usage(program);
 			exit(0);
diff --git a/flags.h b/flags.h
index afdd72d..64f8c6b 100644
--- a/flags.h
+++ b/flags.h
@@ -68,6 +68,7 @@ struct Flags {
 	bool use_zerocopy = false;  // Not user-settable.
 	bool can_disable_srgb_decoder = false;  // Not user-settable.
 	bool full_screen = false;
+	bool prefer_sdi = false;
 };
 extern Flags global_flags;
 
