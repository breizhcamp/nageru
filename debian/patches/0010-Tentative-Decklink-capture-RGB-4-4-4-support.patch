From: Yoann Dubreuil <yoann.dubreuil@gmail.com>
Date: Mon, 19 Mar 2018 09:53:42 +0100
Subject: Tentative Decklink capture RGB 4:4:4 support

---
 decklink_capture.cpp | 27 ++++++++++++++++++++++-----
 decklink_capture.h   |  2 +-
 mixer.cpp            |  8 ++------
 3 files changed, 25 insertions(+), 12 deletions(-)

diff --git a/decklink_capture.cpp b/decklink_capture.cpp
index b2d3891..b8ec975 100644
--- a/decklink_capture.cpp
+++ b/decklink_capture.cpp
@@ -147,6 +147,8 @@ BMDPixelFormat pixel_format_to_bmd(PixelFormat pixel_format)
 		return bmdFormat8BitYUV;
 	case PixelFormat_10BitYCbCr:
 		return bmdFormat10BitYUV;
+	case PixelFormat_8BitBGRA:
+		return bmdFormat8BitBGRA;
 	default:
 		assert(false);
 	}
@@ -258,6 +260,11 @@ DeckLinkCapture::DeckLinkCapture(IDeckLink *card, int card_index)
 	video_modes = summarize_video_modes(mode_it, card_index);
 	mode_it->Release();
 
+	if (global_flags.ten_bit_input) {
+		current_pixel_format = PixelFormat_10BitYCbCr;
+	} else {
+		current_pixel_format = PixelFormat_8BitYCbCr;
+	}
 	set_video_mode_no_restart(bmdModeHD720p50);
 
 	input->SetCallback(this);
@@ -300,11 +307,18 @@ HRESULT STDMETHODCALLTYPE DeckLinkCapture::VideoInputFormatChanged(
 	IDeckLinkDisplayMode* display_mode,
 	BMDDetectedVideoInputFormatFlags format_flags)
 {
-	if (format_flags & bmdDetectedVideoInputRGB444) {
-		fprintf(stderr, "WARNING: Input detected as 4:4:4 RGB, but Nageru can't consume that yet.\n");
-		fprintf(stderr, "Doing hardware conversion to 4:2:2 Y'CbCr.\n");
-	}
 	if (supports_autodetect && display_mode->GetDisplayMode() != current_video_mode) {
+		if (format_flags & bmdDetectedVideoInputRGB444) {
+			fprintf(stderr, "WARNING: Input detected as 4:4:4 RGB, but Nageru can't consume that yet.\n");
+			fprintf(stderr, "Doing hardware conversion to 4:2:2 Y'CbCr.\n");
+			current_pixel_format = PixelFormat_8BitBGRA;
+		} else {
+			if (global_flags.ten_bit_input) {
+				current_pixel_format = PixelFormat_10BitYCbCr;
+			} else {
+				current_pixel_format = PixelFormat_8BitYCbCr;
+			}
+		}
 		set_video_mode(display_mode->GetDisplayMode());
 	}
 	if (display_mode->GetFrameRate(&frame_duration, &time_scale) != S_OK) {
@@ -357,7 +371,10 @@ HRESULT STDMETHODCALLTYPE DeckLinkCapture::VideoInputFrameArrived(
 		const int stride = video_frame->GetRowBytes();
 		const BMDPixelFormat format = video_frame->GetPixelFormat();
 		assert(format == pixel_format_to_bmd(current_pixel_format));
-		if (global_flags.ten_bit_input) {
+
+		if (format == PixelFormat_8BitBGRA) {
+			assert(stride == width * 4);
+		} else if (global_flags.ten_bit_input) {
 			assert(stride == int(v210Converter::get_v210_stride(width)));
 		} else {
 			assert(stride == width * 2);
diff --git a/decklink_capture.h b/decklink_capture.h
index 62c5dc0..e046c7e 100644
--- a/decklink_capture.h
+++ b/decklink_capture.h
@@ -95,7 +95,7 @@ public:
 	uint32_t get_current_video_mode() const override { return current_video_mode; }
 
 	std::set<bmusb::PixelFormat> get_available_pixel_formats() const override {
-		return std::set<bmusb::PixelFormat>{ bmusb::PixelFormat_8BitYCbCr, bmusb::PixelFormat_10BitYCbCr };
+		return std::set<bmusb::PixelFormat>{ bmusb::PixelFormat_8BitBGRA, bmusb::PixelFormat_8BitYCbCr, bmusb::PixelFormat_10BitYCbCr };
 	}
 	void set_pixel_format(bmusb::PixelFormat pixel_format) override;
 	bmusb::PixelFormat get_current_pixel_format() const override {
diff --git a/mixer.cpp b/mixer.cpp
index e1d9ca9..e85246a 100644
--- a/mixer.cpp
+++ b/mixer.cpp
@@ -529,14 +529,10 @@ void Mixer::configure_card(unsigned card_index, CaptureInterface *capture, CardT
 	}
 
 	PixelFormat pixel_format;
-	if (card_type == CardType::FFMPEG_INPUT) {
-		pixel_format = capture->get_current_pixel_format();
-	} else if (card_type == CardType::CEF_INPUT) {
+	if (card_type == CardType::CEF_INPUT) {
 		pixel_format = PixelFormat_8BitBGRA;
-	} else if (global_flags.ten_bit_input) {
-		pixel_format = PixelFormat_10BitYCbCr;
 	} else {
-		pixel_format = PixelFormat_8BitYCbCr;
+		pixel_format = capture->get_current_pixel_format();
 	}
 
 	card->capture->set_frame_callback(bind(&Mixer::bm_frame, this, card_index, _1, _2, _3, _4, _5, _6, _7));
