From: Yoann Dubreuil <yoann.dubreuil@gmail.com>
Date: Thu, 15 Feb 2018 22:00:10 +0100
Subject: Option to specify input delay per card

Consumer grade camcorders have an HDMI output lag that needs to be
compensated to be in sync with ALSA input.
---
 decklink_capture.cpp |  6 +++++-
 decklink_capture.h   |  1 +
 flags.cpp            | 18 ++++++++++++++++++
 flags.h              |  1 +
 4 files changed, 25 insertions(+), 1 deletion(-)

diff --git a/decklink_capture.cpp b/decklink_capture.cpp
index 0dd808e..b2d3891 100644
--- a/decklink_capture.cpp
+++ b/decklink_capture.cpp
@@ -261,6 +261,10 @@ DeckLinkCapture::DeckLinkCapture(IDeckLink *card, int card_index)
 	set_video_mode_no_restart(bmdModeHD720p50);
 
 	input->SetCallback(this);
+
+	if (global_flags.card_delay.count(card_index) > 0) {
+		input_delay = global_flags.card_delay[card_index];
+	}
 }
 
 DeckLinkCapture::~DeckLinkCapture()
@@ -333,7 +337,7 @@ HRESULT STDMETHODCALLTYPE DeckLinkCapture::VideoInputFrameArrived(
 		done_init = true;
 	}
 
-	steady_clock::time_point now = steady_clock::now();
+	steady_clock::time_point now = steady_clock::now() - milliseconds(input_delay);
 
 	FrameAllocator::Frame current_video_frame, current_audio_frame;
 	VideoFormat video_format;
diff --git a/decklink_capture.h b/decklink_capture.h
index f940241..62c5dc0 100644
--- a/decklink_capture.h
+++ b/decklink_capture.h
@@ -118,6 +118,7 @@ private:
 	std::string description;
 	uint16_t timecode = 0;
 	int card_index;
+	int input_delay = 0;
 
 	bool has_dequeue_callbacks = false;
 	std::function<void()> dequeue_init_callback = nullptr;
diff --git a/flags.cpp b/flags.cpp
index 2d8e37f..9086937 100644
--- a/flags.cpp
+++ b/flags.cpp
@@ -76,6 +76,7 @@ void usage(Program program)
 	fprintf(stderr, "  -h, --height                    output height in pixels (default 720)\n");
 	if (program == PROGRAM_NAGERU) {
 		fprintf(stderr, "  -c, --num-cards                 set number of input cards (default 2)\n");
+		fprintf(stderr, "  -d, --card-delay=CARD,DEPLAY    set input delay in milliseconds for the given card (can be given multiple times)\n");
 		fprintf(stderr, "  -o, --output-card=CARD          also output signal to the given card (default none)\n");
 		fprintf(stderr, "  -t, --theme=FILE                choose theme (default theme.lua)\n");
 		fprintf(stderr, "  -I, --theme-dir=DIR             search for theme in this directory (can be given multiple times)\n");
@@ -166,6 +167,7 @@ void parse_flags(Program program, int argc, char * const argv[])
 		{ "width", required_argument, 0, 'w' },
 		{ "height", required_argument, 0, 'h' },
 		{ "num-cards", required_argument, 0, 'c' },
+		{ "card-delay", required_argument, 0, 'd' },
 		{ "output-card", required_argument, 0, 'o' },
 		{ "theme", required_argument, 0, 't' },
 		{ "theme-dir", required_argument, 0, 'I' },
@@ -241,6 +243,22 @@ void parse_flags(Program program, int argc, char * const argv[])
 		case 'c':
 			global_flags.num_cards = atoi(optarg);
 			break;
+		case 'd': {
+			char *ptr = strchr(optarg, ',');
+			if (ptr == nullptr) {
+				fprintf(stderr, "ERROR: Invalid argument '%s' to --card-delay (needs a card number and a delay in milliseconds, separated by comma)\n", optarg);
+				exit(1);
+			}
+			*ptr = '\0';
+			const int card_num = atoi(optarg);
+			const int delay = atoi(ptr + 1);
+			if (global_flags.card_delay.count(card_num)) {
+				fprintf(stderr, "ERROR: Delay already defined for card %d\n", card_num);
+				exit(1);
+			}
+			global_flags.card_delay[card_num] = delay;
+			break;
+		}
 		case 'o':
 			global_flags.output_card = atoi(optarg);
 			break;
diff --git a/flags.h b/flags.h
index 147c62a..6dbdf5a 100644
--- a/flags.h
+++ b/flags.h
@@ -13,6 +13,7 @@
 struct Flags {
 	int width = 1280, height = 720;
 	int num_cards = 2;
+	std::map<int, int> card_delay;
 	std::string va_display;
 	bool fake_cards_audio = false;
 	bool uncompressed_video_to_http = false;
